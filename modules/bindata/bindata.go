// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\x3f\x6f\xdc\x30\x0c\xc5\xe7\xe8\x53\x10\x4a\xc7\x34\xbd\x0e\xb7\x14\xe8\x10\xb4\x19\x53\x04\x45\x80\x0e\x86\x20\x38\x12\xed\x12\xd5\x9f\x83\x44\xa5\xce\xb7\x2f\x2d\xfb\x70\x45\x3b\xc7\x8b\x8d\xe7\x1f\x1f\x1f\xc9\xa1\xb4\x64\x14\x25\x62\xeb\xa2\xaf\xf0\x19\x06\x75\x35\xe8\x39\xeb\x1b\xd0\x94\x2a\x8f\x21\x68\x73\x73\xd1\x9e\x1b\x05\xbf\x2b\xb7\x1f\xde\xdd\x3d\x3e\xda\x6f\x77\x0f\xf7\xda\x28\x73\x75\x7e\xae\xe1\x4b\x8e\x71\x4c\xe2\x27\xf6\x40\x09\xc4\xa7\xb0\xfa\x3d\xb2\xfb\x69\xc5\x51\xda\x70\x69\xb8\xc3\x3f\x56\x19\x56\xb9\xb6\xe7\xf7\x9e\x0a\x3a\xce\x85\xb0\xee\x05\xa2\xf4\x60\xe6\xec\xfe\xf5\x82\x00\x67\xe8\xd4\xce\xe2\xc2\x9d\xd5\xb7\x12\xd7\x6c\xf8\xfd\xc2\x98\x2a\xe5\xf4\x17\x4d\x73\xca\x05\x77\x92\x78\x9d\x2c\x65\x8f\x36\x66\xdf\x02\x56\x6d\xe0\xff\x3e\xb8\xb8\xd0\x3c\xc2\x54\x72\xdc\x6c\x28\xcd\xbb\x93\x9d\x48\xca\x2e\x29\xaf\xe1\x3b\xce\xb8\x9c\x2a\x4c\xb9\x40\x67\x04\x86\x7a\x42\x47\x13\x39\x48\x99\xe5\x2d\x23\xf6\x7d\x5a\x8f\x61\x7c\x95\xea\x8f\xc7\xc3\x61\xaf\x7f\x90\xa3\xc4\x31\xc8\xf6\x18\xcb\x8b\x7c\x48\x82\xa7\x42\xf3\x8c\x05\x7a\x11\xe0\x0b\x26\x56\xfd\x7f\x69\x27\xb6\x4c\x31\x37\xee\x2e\x9b\xc5\x13\x45\xdc\x46\x26\x86\x96\x98\xc2\x9a\xc6\x21\xfc\xa2\x10\xd4\x9b\xdc\x5b\xba\xc9\xc9\x95\x1a\xea\x6b\x72\x46\x05\xaa\xb2\x7b\x3b\x7a\x5f\xa4\x95\xfe\x74\x3c\x1c\x0f\x5a\x15\x8c\x99\xf1\x1f\xf5\x4f\x00\x00\x00\xff\xff\xf7\x50\xe4\x79\x8a\x02\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 650, mode: os.FileMode(420), modTime: time.Unix(1441380381, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.bra.toml": &bintree{templatesDefaultBraToml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

