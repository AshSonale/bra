// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\x3f\x6b\xf3\x30\x10\xc6\xe7\xe8\x53\x1c\xca\x3b\xe6\x4d\xdd\x21\x4b\xa1\x43\x68\x33\xa6\x84\x52\xe8\x60\x84\x71\xac\xb3\x7b\x20\x4b\x41\x3a\xa7\xce\xb7\xef\xc5\x51\x48\x69\xe7\x7a\xb1\x78\xf8\x3d\xcf\xfd\x2b\xe3\xe0\x8d\x22\x4f\x5c\x35\xbd\x4d\xf0\x08\xa5\x9a\x95\xba\x0b\x7a\x01\x9a\x7c\xe2\xda\x39\x6d\x16\x37\x6d\x3f\x90\xb3\x59\x59\xde\xfd\x5b\xef\x76\xd5\xcb\x7a\xbb\xd1\x46\x99\xd9\xf5\x9b\xc3\x53\xe8\xfb\xda\x4b\x9e\xc4\x03\x79\x90\x9c\xc8\xea\xb3\xe6\xe6\xa3\x92\x44\x29\xc3\x71\xc0\x0c\xbf\x9f\x65\x38\xcb\x69\xd8\xff\xb7\x14\xb1\xe1\x10\x09\x53\x36\x88\x32\x35\x66\xae\xe9\xcf\x37\x04\x38\xc0\x44\x65\x16\x47\x9e\x58\xbd\x94\x76\xcd\x05\xdf\x8c\x8c\x3e\x51\xf0\xdf\x68\xea\x7c\x88\x98\x49\xe2\xf3\x64\x3e\x58\xac\xfa\x60\x07\x87\x49\x1b\xf8\x5d\x07\xc7\xc6\x0d\x16\xa1\x8d\xa1\xbf\xc4\x90\xef\x72\x52\xd5\x92\xd8\x6e\x5d\xce\xe1\x15\x3b\x1c\x0f\x09\xda\x10\x61\x62\x04\x86\x74\xc0\x86\x5a\x6a\xc0\x07\x96\xbf\x8c\x38\xed\xb3\xb2\xe8\xea\x93\xb8\xef\x57\x45\x91\xfd\x5b\x39\x4a\x5f\x3b\xd9\x1e\x63\x3c\xca\x43\x3a\x78\x8b\xd4\x75\x18\x61\x32\x01\x1e\xd1\xb3\xfa\x93\xb3\x49\x2d\xb9\x9c\x52\x65\x3a\xf9\xc6\x28\x47\x49\x56\x58\xd5\xd6\x46\x29\xa5\x1f\x56\xc5\xaa\xd0\x2a\x62\x1f\x18\x7f\xa8\x5f\x01\x00\x00\xff\xff\xe9\x27\x67\x39\x51\x02\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 593, mode: os.FileMode(436), modTime: time.Unix(1438261848, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.bra.toml": &bintree{templatesDefaultBraToml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

