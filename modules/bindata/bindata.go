// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\x3d\x4f\xc3\x40\x0c\x86\xe7\xde\xaf\xb0\x0e\xc6\x52\xc2\xd0\x05\x89\xa1\x82\x8e\x45\x1d\x90\x18\xa2\x53\x94\xe6\x4c\xb0\x74\x1f\x92\xcf\x29\xed\xbf\xc7\x4d\x53\x15\xc1\x4c\xa6\xe8\xd5\x73\x8f\xed\xb7\xe6\x21\x39\x43\x89\xa4\xe9\xa2\x2f\xf0\x04\xb5\x99\xd5\xb6\xcf\x76\x0e\x96\x52\x91\x36\x04\xeb\xe6\xd7\x6c\x37\x50\xf0\x53\xb2\xb8\xbf\x5d\x6d\xb7\xcd\xeb\x6a\xb3\xb6\xce\xb8\xd9\xe5\xbb\x81\xe7\x1c\x63\x9b\xd4\xa7\x7a\xa0\x04\xea\x61\x31\x5f\xad\x74\x9f\x8d\x1a\x75\x8c\xf0\x80\x13\xfc\x7e\x8a\xe1\x14\x97\x61\x77\xe7\x89\xb1\x93\xcc\x84\x65\x7a\xa0\xc9\xb8\x98\xbb\xd8\x5f\xae\x08\x48\x86\x91\x9a\x58\x3c\xc8\xc8\xda\x85\xae\xeb\xce\xf8\xfa\x20\x98\x0a\xe5\xf4\x83\xa6\x3e\x65\xc6\x89\x24\x39\x5d\x96\xb2\xc7\x26\x66\x3f\x04\x2c\xd6\xc1\xdf\x39\x78\xe8\xc2\xe0\x11\x3e\x38\xc7\xb3\x86\x52\x6f\xc6\x42\x1a\x8f\xa1\x3d\xaa\xee\x61\x59\x55\xd3\x96\x1b\x6d\x35\xb6\x41\xcf\x17\xe4\xbd\xfe\xa8\xe2\x8d\xa9\xef\x91\x61\x7c\x04\xb8\xc7\x24\xe6\x5f\x7a\xd7\x59\x5a\xbd\x31\x75\x39\xa6\xce\x99\x40\x45\x3b\x68\x5a\xef\x59\x47\xd9\xc7\x65\xb5\xac\xac\x61\x8c\x59\xf0\x57\xfa\x1d\x00\x00\xff\xff\xda\x0b\xc2\x12\x12\x02\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 530, mode: os.FileMode(436), modTime: time.Unix(1436985141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.bra.toml": &bintree{templatesDefaultBraToml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

